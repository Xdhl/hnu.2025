【问题描述】

       定义一个字符串的无序度为所有位置后面的字母比该位置的字母小的总数之和。比如"DAABEC''这个字符串的无序度是5，因为D后面有4个位置比它小（AABC），E后面有1个比它小（C），其它位置后面没有比自己小的。" AACEDGG "的无序度为1（E后面有一个D比它小）。" ZWQM "的无序度为6，每个位置后面所有的字母都比它小。
       现在你的任务是给定一些字符串（只由大写字母组成），把他们按照无序度从小到大排序，如果无序度一样，那么就按照输入的相对顺序排序。

【输入形式】

     单组测试数据。
     第一行有两个整数n(0 < n <= 50)和m (0 < m <= 100)，分别表示输入的字符串的长度和字符串的个数。
     接下来m行，每一行包含一个长度为n的字符串，只由大写字母组成。
【输出形式】

    输出m行，表示排序之后的字符串。
【样例输入】

10 6
AACATGAAGG
TTTTGGCCAA
TTTGGCCAAA
GATCAGATTT
CCCGGGGGGA
ATCGATGCAT
【样例输出】

CCCGGGGGGA
AACATGAAGG
GATCAGATTT
ATCGATGCAT
TTTTGGCCAA
TTTGGCCAAA


#include<iostream>
#include<map>
#include<vector>
using namespace std;
int main()
{
	int n, m;
	cin >> n >> m;
	vector<string>s;
	vector<int>num(m, 0);
	for (int i = 0; i < m; i++) {
		string str;
		cin >> str;
		s.push_back(str);
		for (int k = 0; k < n; k++) {
			for (int j = 0; j < k; j++) {
				if (str[j] > str[k]) {
					num[i]++;
				}
			}
		}
	}
	multimap<int, string>sorted;
	for (int i = 0; i < m; i++) {
		sorted.insert({ num[i],s[i] });
	}
	for (auto& pair : sorted) {
		cout << pair.second << endl;
	}
	return 0;
}
