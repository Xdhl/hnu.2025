问题描述】

       欧洲冠军联赛常被誉为全世界最具影响力的俱乐部级赛事。在比赛的小组赛阶段，欧洲的各个足球俱乐部被分为八个小组，每个小组中四支球队。每个小组中的球队按照如下规则排序：

球队会根据比赛结果获得积分。一场比赛的双方被称为主队和客队。如果其中一方进球数多于另一方，那么进球较多的一方获得3 分，另一方获得0 分。如果双方打成平手，则各得1分。

球队的净胜球数是其进球数减去失球数（不考虑该球队在比赛中作为主队还是客队）。

积分较高的球队排名更加靠前。

如果两支球队积分相同，那么净胜球数较多的球队排名靠前。

      小组的各队伍进行循环赛，即每两支球队之间进行两场比赛，双方交替作为主队。给定一个小组内12 场比赛的结果，请求出小组的出线队伍：即排名第一和第二的两支球队。

保证答案唯一。

【输入形式】

      输入的第一行包含一个整数T，代表测试数据的组数。接下来是 T 组数据。

      每组数据共有12 行，每行描述一场比赛，格式为：“主队队名主队进球数vs. 客队进球数客队队名”，其中“主队队名”和“客队队名”为字符串，“主队进球数”和“客队进球数”为两球队在本场比赛中各自的进球数量。    

1 ≤ T ≤ 50

球队队名仅包含小写英文字母

球队队名长度不超过10 个字符

0 ≤ 进球数 ≤ 100

【输出形式】

       对于每组数据，输出一行，包含两个字符串，代表排名第一和第二的球队的队名。


#include<iostream>
#include<map>
using namespace std;
void no(map<string, int> &teamScore, string team1, string team2,bool pin=0) {
	auto it1 = teamScore.find(team1);
	auto it2 = teamScore.find(team2);
	if (pin == 0) {
		if (it1 == teamScore.end()) 		teamScore.insert({ team1,3 });
		else {
			int temp = it1->second;
			teamScore.erase(team1);
			teamScore.insert({ team1,temp + 3 });
		}
		if (it2 == teamScore.end()) teamScore.insert({ team2,0 });
	}
	if (pin == 1) {
		if (it1 == teamScore.end()) teamScore.insert({ team1,1 });
		else {
			int temp = it1->second;
			teamScore.erase(team1);
			teamScore.insert({ team1,temp + 1 });
		}
		if (it2 == teamScore.end()) teamScore.insert({ team2,1 });
		else {
			int temp = it2->second;
			teamScore.erase(team2);
			teamScore.insert({ team2,temp + 1 });
		}
	}
}
void nono(map<string, int>&pureBall, string team,int score) {
	auto it = pureBall.find(team);
	if (it == pureBall.end()) 		pureBall.insert({ team,score });
	else {
		int temp = it->second;
		pureBall.erase(team);
		pureBall.insert({ team,temp + score });
	}
}
int main()
{
	int t;
	cin >> t;
	for (int i = 0; i < t; i++) {
		map<string,int>teamScore;
		map<string,int>pureBall;
		for (int j = 0; j < 12; j++) {
			string team1, team2,vs;
			int score1, score2;
			cin >> team1 >>score1>>vs>>score2>>team2;
			auto it1 = teamScore.find(team1);
			auto it2 = teamScore.find(team2);
			if (score1 > score2) 	no(teamScore, team1, team2);
			if (score1 < score2) no(teamScore, team2, team1);
			if (score1 == score2) no(teamScore, team1, team2, 1);
			nono(pureBall, team1, score1 - score2);
			nono(pureBall, team2, score2 - score1);
		}
		multimap<int, string>Eteam,Eball;
		for (auto pair : teamScore) {
			Eteam.insert({ pair.second,pair.first });
		}
		for (auto pair : pureBall) {
			Eball.insert({ pair.second,pair.first });
		}
		auto it = Eteam.rbegin(), it2 = it++;
		string team1 = it->second, team2 = it2->second;
		if (it->first != it->first) cout << it->second << " " << it->second << endl;
		else {
			string max1 = team1, max2 = team2;
			int maxS1 = it->first, maxS2 = it2->first, maxB1 = pureBall.find(max1)->second, maxB2 = pureBall.find(max2)->second;
			if (maxB1<maxB2) {
				swap(max1, max2);
				swap(maxS1, maxS2);
				swap(maxB1, maxB2);
			}
			for (int i = 0; i < 2; i++) {
				it2++;
				string max = it2->second;
				int maxS = it2->first, maxB = pureBall.find(max)->second;
				if (maxS>=maxS2&&maxB>maxB2) {
					swap(max, max2);
					swap(maxS, maxS2);
					swap(maxB, maxB2);
				}
				if (maxS2>=maxS1&&maxB1 < maxB2) {
					swap(max1, max2);
					swap(maxS1, maxS2);
					swap(maxB1, maxB2);
				}
			}
			cout << max1 << " " << max2 << endl;
		}
	}	
	return 0;
}

